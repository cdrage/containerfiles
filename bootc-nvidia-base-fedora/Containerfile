# **Description:**
# > IMPORTANT NOTE: This is BOOTC. This is meant for bootable container applications. See: https://github.com/containers/podman-desktop-extension-bootc
#
# This is a "base" container that installs the nvidia drivers and the nvidia container toolkit. 
# This is meant to be used as a base for other containers that need GPU access.
#
# DISABLE SECURE BOOT! You have been warned! Disable boot is **KNOWN** to cause issues with the nvidia drivers.
# ENABLE 4G DECODING in the BIOS. This is needed for certain nvidia cards to work such as the Tesla P40.
# 
# This Fedora 43 as the base image to (hopefully) be as stable as possible.
#
# This also supports the 5000 series GPUs from NVIDIA
#
# IMPORTANT NOTE:
# ANOTHER important note!!! Older cards such as the tesla p40 MAY not work because of the drivers being "too new" I had multiple issues with the p40 and the drivers. But no problems with RTX 3060 / 5070 tested on.
#
# See inline comments within the Containerfile for more infromation about what is happening.
#
# **Running:**
# 1. In your OTHER Containerfile, change to `FROM foo.bar/yourusername/bootc-nvidia-base-centos` / this Containerfile.
# 2. This will modprobe the nvidia drivers on boot.


FROM quay.io/fedora/fedora-bootc:43

#! Install rpmfusion free and nonfree repo's for access to the nvidia drivers
RUN dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
RUN dnf install -y https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

#! Install the kernel devel and kernel header tools
#! We get the kernel that is being used in THE BASE IMAGE by doing /usr/lib/modules && echo *, then we install the kernel-devel for that kernel
#! SOMETIMES this messes up if the "base" image has an outdated kernel vs the one you get from dnf
RUN export KVER=$(cd /usr/lib/modules && echo *) && \
    dnf install -y kernel-devel-$KVER

#! Install the nvidia drivers
RUN dnf install -y akmod-nvidia xorg-x11-drv-nvidia-cuda

#! Install NVIDIA container toolkit
RUN curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | tee /etc/yum.repos.d/nvidia-container-toolkit.repo && \
    dnf install -y nvidia-container-toolkit

#! Blacklist the nouveau driver to ensure NVIDIA drivers function properly
RUN echo "blacklist nouveau" > /etc/modprobe.d/blacklist_nouveau.conf

#! See: "Kernel Open" on:
#! https://rpmfusion.org/Howto/NVIDIA?highlight=%28%5CbCategoryHowto%5Cb%29
#! Starting 515xx and above, to support the 5000 series and newer cards, the kernel needs to be "open" to allow the nvidia drivers to work when compiling with akmods.
RUN sh -c 'echo "%_with_kmod_nvidia_open 1" > /etc/rpm/macros.nvidia-kmod'

#! Add `options nvidia NVreg_OpenRmEnableUnsupportedGpus=1` to /etc/modprobe.d/nvidia.conf
#! which will enable the 5000 series GPUs to work with the nvidia drivers.
RUN echo "options nvidia NVreg_OpenRmEnableUnsupportedGpus=1" > /etc/modprobe.d/nvidia.conf

#! Build kmods which runs on boot.
#! The reasoning for the script is that sometimes the kernel version is different on the base images vs what is actually on 
#! dnf update, so we have to "fake it till you make it" scenario.
RUN dnf install -y dkms
COPY --chmod=755 dkms.sh /tmp
RUN /tmp/dkms.sh

#! Copy necessary usr files
COPY usr/ /usr/

#! Enable necessary services to be started at boot
RUN systemctl enable nvidia-toolkit-firstboot.service
